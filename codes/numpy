import numpy as np

'''
Генерация случайной матрицы, состоящей из 1000 строк и 50 столбцов, элементы которой являются случайными из нормального распределения N(1,100).
Функция для генерации чисел из нормального распределения: np.random.normal
    loc: среднее нормального распределения (в нашем случае 1)
    scale: стандартное отклонение нормального распределения (в нашем случае 10)
    size: размер матрицы (в нашем случае (1000, 50))
'''

matrix = np.random.normal(loc=1.0, scale=10.0, size=(1000, 50))
print(matrix)

'''
Нормировка матрицы
вычтите из каждого столбца его среднее значение, а затем поделите на его стандартное отклонение.
(если axis=0, то по столбцам, если axis=1, то по строкам; если его не указывать, то данные величины будут вычислены по всей матрице)
'''

average = np.mean(matrix, axis = 0) #среднее значение по строкам
standart = np.std(matrix, axis = 0) #стандартное отклонение

normalization = ((matrix - average) - standart)
print(normalization)

'''
Операции над элементами матрицы
Функция для подсчета суммы: np.sum
Выведите для заданной матрицы номера строк, сумма элементов в которых превосходит 10.
Аргументы аналогичны функциям np.mean и np.std.

К матрицам можно применять логические операции, которые будут применяться поэлементно.
Соответственно, результатом такой операции будет матрица такого же размера, в ячейках которой будет записано либо True, либо False.
Индексы элементов со значением True можно получить с помощью функции np.nonzero.
'''

#новая матрица для примера
Z = np.array([[4, 5, 0],
             [1, 9, 3],
             [5, 1, 1],
             [3, 3, 3],
             [9, 9, 9],
             [4, 7, 1]])

r = np.sum(Z, axis=1)
print (np.nonzero(r > 10))

'''
Объединение матриц
Сгенерируйте две единичные матрицы (т.е. с единицами на диагонали) размера 3x3. Соедините две матрицы в одну размера 6x3.

Функция для генерации единичной матрицы: np.eye
Аргумент: число строк (или, что эквивалентно, столбцов).

Функция для вертикальной стыковки матриц: np.vstack((A, B))
'''

A = np.eye(3)
B = np.eye(3)

print(A)
print(B)

# NB всего один аргумент, в котором два аргумента)))))00)0))00
AB = np.vstack((A, B))

print(AB)
